{
  "$schema": "https://json-schema.org/draft-07/schema#",
  "version": "1.0.0",
  "description": "Skill auto-activation rules for PineCMS. Defines when skills should be automatically suggested based on user prompts, file edits, and content patterns.",
  "skills": {
    "backend-dev-guidelines": {
      "type": "domain",
      "enforcement": "suggest",
      "priority": "high",
      "description": "Laravel backend development patterns: Controllers, Services, Repositories, Events, Queues",
      "instructionFile": ".claude/instructions/backend.md",
      "promptTriggers": {
        "keywords": [
          "backend",
          "controller",
          "service",
          "repository",
          "eloquent",
          "model",
          "migration",
          "seeder",
          "factory",
          "event",
          "listener",
          "queue",
          "job",
          "api",
          "endpoint",
          "route",
          "middleware",
          "policy",
          "gate",
          "artisan",
          "command"
        ],
        "intentPatterns": [
          "(create|add|generate).*?(controller|service|repository|model|migration)",
          "(how to|best practice).*?(backend|API|laravel)",
          "(implement|build).*?(endpoint|route|API)",
          "event.*?listener",
          "queue.*?job"
        ]
      },
      "fileTriggers": {
        "pathPatterns": [
          "app/Http/Controllers/**/*.php",
          "app/Services/**/*.php",
          "app/Repositories/**/*.php",
          "app/Models/**/*.php",
          "app/Events/**/*.php",
          "app/Listeners/**/*.php",
          "app/Jobs/**/*.php",
          "routes/**/*.php",
          "database/migrations/**/*.php",
          "database/seeders/**/*.php",
          "database/factories/**/*.php"
        ],
        "contentPatterns": [
          "namespace App\\\\Http\\\\Controllers",
          "namespace App\\\\Services",
          "namespace App\\\\Repositories",
          "extends Controller",
          "extends Model",
          "implements ShouldQueue",
          "Route::",
          "Schema::",
          "DB::"
        ]
      }
    },
    "frontend-dev-guidelines": {
      "type": "domain",
      "enforcement": "suggest",
      "priority": "high",
      "description": "Vue 3 + Inertia + PrimeVue + TailwindCSS frontend patterns",
      "instructionFile": ".claude/instructions/frontend.md",
      "promptTriggers": {
        "keywords": [
          "frontend",
          "vue",
          "inertia",
          "component",
          "primevue",
          "tailwind",
          "alpine",
          "blade",
          "template",
          "reactive",
          "composable",
          "pinia",
          "store",
          "router",
          "form",
          "validation",
          "ui",
          "ux",
          "styling",
          "layout",
          "responsive"
        ],
        "intentPatterns": [
          "(create|add|build).*?(component|page|form|layout)",
          "(how to|best practice).*?(vue|inertia|frontend)",
          "style.*?(component|page|form)",
          "(reactive|computed|watch).*?",
          "composable.*?",
          "pinia.*?store"
        ]
      },
      "fileTriggers": {
        "pathPatterns": [
          "resources/js/Pages/**/*.vue",
          "resources/js/Components/**/*.vue",
          "resources/js/Layouts/**/*.vue",
          "resources/js/composables/**/*.ts",
          "resources/js/stores/**/*.ts",
          "resources/views/**/*.blade.php"
        ],
        "contentPatterns": [
          "<script setup",
          "import.*?from '@inertiajs",
          "import.*?from 'vue'",
          "import.*?from 'primevue",
          "usePage()",
          "useForm()",
          "router.visit",
          "@apply",
          "defineProps",
          "defineEmits",
          "defineStore"
        ]
      }
    },
    "testing-guidelines": {
      "type": "domain",
      "enforcement": "suggest",
      "priority": "high",
      "description": "PHPUnit, Vitest, Playwright testing patterns and TDD workflow",
      "instructionFile": ".claude/instructions/testing.md",
      "promptTriggers": {
        "keywords": [
          "test",
          "testing",
          "tdd",
          "phpunit",
          "vitest",
          "playwright",
          "unit test",
          "feature test",
          "integration test",
          "e2e",
          "end-to-end",
          "coverage",
          "assertion",
          "mock",
          "spy",
          "stub"
        ],
        "intentPatterns": [
          "(write|create|add).*?test",
          "(how to|best practice).*?test",
          "tdd.*?",
          "test.*?(coverage|driven)",
          "(mock|stub|spy).*?"
        ]
      },
      "fileTriggers": {
        "pathPatterns": [
          "tests/**/*.php",
          "resources/js/**/*.test.ts",
          "resources/js/**/*.spec.ts",
          "tests/e2e/**/*.spec.ts"
        ],
        "contentPatterns": [
          "extends TestCase",
          "use RefreshDatabase",
          "test(",
          "it\\(",
          "describe\\(",
          "expect\\(",
          "assert",
          "->assertStatus",
          "->assertJson"
        ]
      }
    },
    "security-guidelines": {
      "type": "guardrail",
      "enforcement": "suggest",
      "priority": "critical",
      "description": "OWASP Top 10, authentication, authorization, security best practices",
      "instructionFile": ".claude/instructions/security.md",
      "promptTriggers": {
        "keywords": [
          "security",
          "auth",
          "authentication",
          "authorization",
          "permission",
          "role",
          "policy",
          "gate",
          "csrf",
          "xss",
          "sql injection",
          "owasp",
          "encrypt",
          "hash",
          "password",
          "token",
          "session",
          "cookie",
          "sanitize",
          "validate"
        ],
        "intentPatterns": [
          "(implement|add|create).*?(auth|security|permission)",
          "(how to|best practice).*?(secure|security|auth)",
          "(prevent|protect).*?(xss|injection|csrf)",
          "validate.*?input",
          "sanitize.*?"
        ]
      },
      "fileTriggers": {
        "pathPatterns": [
          "app/Http/Controllers/Auth/**/*.php",
          "app/Policies/**/*.php",
          "config/auth.php",
          "config/sanctum.php",
          "routes/auth.php"
        ],
        "contentPatterns": [
          "Auth::",
          "Gate::",
          "Policy",
          "authorize\\(",
          "Hash::",
          "Crypt::",
          "csrf_token",
          "sanitize",
          "validate\\("
        ]
      }
    },
    "architecture-guidelines": {
      "type": "domain",
      "enforcement": "suggest",
      "priority": "high",
      "description": "SOLID principles, Event-Driven Architecture, separation of concerns, N+1 prevention",
      "instructionFile": ".claude/instructions/architecture.md",
      "promptTriggers": {
        "keywords": [
          "architecture",
          "solid",
          "design pattern",
          "refactor",
          "structure",
          "separation of concerns",
          "event-driven",
          "n+1",
          "eager loading",
          "repository pattern",
          "service layer",
          "dependency injection"
        ],
        "intentPatterns": [
          "refactor.*?",
          "(how to|best practice).*?(architecture|structure|pattern)",
          "implement.*?(pattern|architecture)",
          "(prevent|fix).*?n\\+1"
        ]
      },
      "fileTriggers": {
        "pathPatterns": [
          "app/Services/**/*.php",
          "app/Repositories/**/*.php",
          "app/Events/**/*.php",
          "app/Listeners/**/*.php"
        ],
        "contentPatterns": [
          "namespace App\\\\Services",
          "namespace App\\\\Repositories",
          "namespace App\\\\Events",
          "namespace App\\\\Listeners",
          "interface",
          "->with\\(",
          "->load\\("
        ]
      }
    },
    "quality-gates": {
      "type": "guardrail",
      "enforcement": "suggest",
      "priority": "critical",
      "description": "Quality checks: QPLAN, QCHECK, QCODE workflows",
      "instructionFile": ".claude/instructions/quality-gates.md",
      "promptTriggers": {
        "keywords": [
          "quality",
          "qplan",
          "qcheck",
          "qcode",
          "lint",
          "format",
          "phpstan",
          "pint",
          "eslint",
          "prettier",
          "type check",
          "build",
          "compile"
        ],
        "intentPatterns": [
          "run.*?(quality|lint|format|build)",
          "(check|verify).*?(quality|types|errors)",
          "before.*?(commit|push|pr)"
        ]
      },
      "fileTriggers": {
        "pathPatterns": [],
        "contentPatterns": []
      }
    }
  },
  "meta": {
    "lastUpdated": "2025-10-30",
    "author": "PineCMS",
    "notes": [
      "Skills are auto-activated via UserPromptSubmit hook",
      "Gentle reminders via Stop hook for error handling and quality checks",
      "Follow Anthropic best practices: <500 lines main file, use progressive disclosure"
    ]
  }
}
